name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DATABASE_URL: postgresql://test:test@localhost:5432/test_db
  DIRECT_URL: postgresql://test:test@localhost:5432/test_db
  NEXT_PUBLIC_NODE_ENV: test
  NODE_ENV: test
  SUPABASE_ANON_KEY: test-anon-key
  NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
  SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
  NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
  UPSTASH_REDIS_URL: redis://localhost:6379
  UPSTASH_REDIS_TOKEN: test-token
  NEXTAUTH_SECRET: test-secret-key-for-ci
  NEXTAUTH_URL: http://localhost:3000
  # Required environment variables for build
  STRIPE_SECRET_KEY: sk_test_dummy_key_for_ci_builds_only
  RESEND_API_KEY: re_dummy_key_for_ci_builds_only
  INTERNAL_API_SECRET: dummy-internal-api-secret-for-ci-builds-that-is-at-least-64-characters-long
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy_key_for_ci_builds_only
  NEXT_PUBLIC_APP_URL: http://localhost:3000

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run TypeScript check
        run: pnpm typecheck

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format --check

      # - name: Check unused dependencies
      #   run: pnpm check:deps

      - name: Validate i18n files
        run: pnpm i18n:validate

  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run unit tests
        run: pnpm test:coverage --reporter=verbose

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/clover.xml
          fail_ci_if_error: false

  build-test:
    name: Build & Production Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Build application
        run: pnpm build
        env:
          ANALYZE: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache
          retention-days: 1

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run database migrations
        run: pnpm db:push

      - name: Start application
        run: pnpm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --prod

      - name: Check for known vulnerabilities
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  mobile-pwa-test:
    name: Mobile PWA Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run mobile-specific E2E tests
        run: npx playwright test --config=playwright-mobile.config.ts
        env:
          BASE_URL: http://localhost:3000

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: mobile-playwright-report
          path: playwright-report/
          retention-days: 7

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Start application
        run: pnpm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          BASE_URL: http://localhost:3000

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-checks, unit-tests, build-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Analyze bundle size
        run: pnpm analyze
        env:
          ANALYZE: true

      - name: Check environment variables
        run: node -e "console.log('Environment variables configured for deployment')"

      - name: Validate production build
        run: |
          if [ -f ".next/BUILD_ID" ]; then
            echo "✅ Production build ready for deployment"
            echo "Build ID: $(cat .next/BUILD_ID)"
          else
            echo "❌ Production build not found"
            exit 1
          fi

  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs:
      [
        quality-checks,
        unit-tests,
        build-test,
        e2e-tests,
        security-audit,
        mobile-pwa-test,
        lighthouse-audit,
      ]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Mobile PWA Tests: ${{ needs.mobile-pwa-test.result }}"
          echo "Lighthouse Audit: ${{ needs.lighthouse-audit.result }}"

          if [[ "${{ needs.quality-checks.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ Core CI checks passed"
          else
            echo "❌ Core CI checks failed"
            exit 1
          fi
