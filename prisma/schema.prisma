generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  email                String            @unique
  fullName             String?           @map("full_name")
  avatarUrl            String?           @map("avatar_url")
  emailVerified        Boolean           @default(false) @map("email_verified")
  phone                String?
  locale               String            @default("en")
  timezone             String            @default("UTC")
  metadata             Json?
  activeWorkspaceId    String?           @map("active_workspace_id")
  lastActiveAt         DateTime          @default(now()) @map("last_active_at")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  invitationsSent      Invitation[]
  profile              Profile?
  sessions             Session[]
  activeWorkspace      Workspace?        @relation("UserActiveWorkspace", fields: [activeWorkspaceId], references: [id])
  workspaceMemberships WorkspaceMember[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  bio       String?
  website   String?
  company   String?
  jobTitle  String?  @map("job_title")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  token        String   @unique
  expiresAt    DateTime @map("expires_at")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  lastActiveAt DateTime @default(now()) @map("last_active_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  logo        String?
  settings    Json              @default("{}")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")
  invitations Invitation[]
  activeUsers User[]            @relation("UserActiveWorkspace")
  members     WorkspaceMember[]

  @@index([slug])
  @@map("workspaces")
}

model WorkspaceMember {
  userId      String        @map("user_id")
  workspaceId String        @map("workspace_id")
  role        WorkspaceRole
  joinedAt    DateTime      @default(now()) @map("joined_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

model Invitation {
  id          String        @id @default(uuid())
  workspaceId String        @map("workspace_id")
  email       String
  role        WorkspaceRole
  invitedById String        @map("invited_by_id")
  token       String        @unique @default(uuid())
  expiresAt   DateTime      @map("expires_at")
  acceptedAt  DateTime?     @map("accepted_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  invitedBy   User          @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([workspaceId])
  @@map("invitations")
}

enum WorkspaceRole {
  owner
  admin
  member
}
