generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ESTRUTURA REAL DO BANCO =====
// Baseado na estrutura real fornecida pelo usuário

model User {
  // Campos que existem na estrutura real
  id                 BigInt   @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  email              String   @unique
  name               String   // nome real da coluna
  systemeContactId   BigInt?  @map("systeme_contact_id")
  country            String?
  language           String?  // não "locale"
  updatedAt          DateTime @default(now()) @map("updated_at")
  
  // Relations baseadas na estrutura real
  orders             Order[]
  orderItems         OrderItem[]
  subscriptions      Subscription[]
  disputes           Dispute[]

  @@map("users")
}

model Product {
  id                BigInt    @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at")
  productCode       String    @unique @map("product_code")
  baseName          String?   @map("base_name")
  niche             String?
  gender            String?
  description       String?
  updatedAt         DateTime  @default(now()) @map("updated_at")
  marketingBriefing Json?     @map("marketing_briefing")
  
  // Relations
  languageVersions  ProductLanguageVersion[]

  @@map("products")
}

model ProductLanguageVersion {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now()) @map("created_at")
  productId         BigInt   @map("product_id")
  languageCode      String   @map("language_code")
  translatedTitle   String?  @map("translated_title")
  author            String?
  salesPageUrl      String?  @map("sales_page_url")
  publicContentUrl  String?  @map("public_content_url")
  internalDriveUrl  String?  @map("internal_drive_url")
  internalContentUrl String? @map("internal_content_url")
  updatedAt         DateTime @default(now()) @map("updated_at")
  productCode       String   @map("product_code")
  
  // Relations
  product           Product    @relation(fields: [productId], references: [id])
  orderItems        OrderItem[]
  funnels           Funnel[]

  @@map("product_language_versions")
}

model Funnel {
  id               BigInt                  @id @default(autoincrement())
  systemeFunnelId  BigInt                  @map("systeme_funnel_id")
  name             String?
  productVersionId BigInt?                 @map("product_version_id")
  updatedAt        DateTime                @default(now()) @map("updated_at")
  
  // Relations
  productVersion   ProductLanguageVersion? @relation(fields: [productVersionId], references: [id])

  @@map("funnels")
}

model Order {
  id              BigInt   @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map("created_at")
  userId          BigInt   @map("user_id")
  systemeOrderId  BigInt?  @map("systeme_order_id")
  currency        String?
  trafficMetadata Json?    @map("traffic_metadata")
  systemeFunnelId BigInt?  @map("systeme_funnel_id")
  gateway         String?
  status          String?
  updatedAt       DateTime @default(now()) @map("updated_at")
  clientIp        String?  @map("client_ip")
  
  // Relations
  user            User       @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                  BigInt                  @id @default(autoincrement())
  createdAt           DateTime                @default(now()) @map("created_at")
  orderId             BigInt?                 @map("order_id")
  productVersionId    BigInt?                 @map("product_version_id")
  itemType            String?                 @map("item_type")
  pricingType         String?                 @map("pricing_type")
  price               Decimal?                @db.Decimal(10, 2)
  systemeOrderItemId  BigInt?                 @map("systeme_order_item_id")
  systemeFunnelStepId BigInt?                 @map("systeme_funnel_step_id")
  description         String?
  updatedAt           DateTime                @default(now()) @map("updated_at")
  userId              BigInt?                 @map("user_id")
  
  // Relations
  order               Order?                  @relation(fields: [orderId], references: [id])
  productVersion      ProductLanguageVersion? @relation(fields: [productVersionId], references: [id])
  user                User?                   @relation(fields: [userId], references: [id])
  payments            Payment[]
  refunds             Refund[]
  subscriptions       Subscription[]
  disputes            Dispute[]

  @@map("order_items")
}

model Payment {
  id                   BigInt     @id @default(autoincrement())
  createdAt            DateTime   @default(now()) @map("created_at")
  orderItemId          BigInt?    @map("order_item_id")
  gateway              String?
  gatewayTransactionId String?    @map("gateway_transaction_id")
  amount               Decimal?   @db.Decimal(10, 2)
  amountBrl            Decimal?   @map("amount_brl") @db.Decimal(10, 2)
  taxBrl               Decimal?   @map("tax_brl") @db.Decimal(10, 2)
  status               String?
  clientIp             String?    @map("client_ip")
  statementDescriptor  String?    @map("statement_descriptor")
  updatedAt            DateTime   @default(now()) @map("updated_at")
  paymentMethod        String?    @map("payment_method")
  cardLastFour         String?    @map("card_last_four")
  cardBrand            String?    @map("card_brand")
  currency             String?
  
  // Relations
  orderItem            OrderItem? @relation(fields: [orderItemId], references: [id])
  refunds              Refund[]
  disputes             Dispute[]

  @@map("payments")
}

model Refund {
  id           BigInt    @id @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at")
  paymentId    BigInt?   @map("payment_id")
  orderItemId  BigInt?   @map("order_item_id")
  type         String?
  reason       String?
  amount       Decimal?  @db.Decimal(10, 2)
  amountBrl    Decimal?  @map("amount_brl") @db.Decimal(10, 2)
  taxRefundBrl Decimal?  @map("tax_refund_brl") @db.Decimal(10, 2)
  updatedAt    DateTime  @default(now()) @map("updated_at")
  disputeId    BigInt?   @map("dispute_id")
  
  // Relations
  payment      Payment?  @relation(fields: [paymentId], references: [id])
  orderItem    OrderItem? @relation(fields: [orderItemId], references: [id])
  dispute      Dispute?  @relation(fields: [disputeId], references: [id])

  @@map("refunds")
}

model Dispute {
  id                BigInt     @id @default(autoincrement())
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @map("updated_at")
  paymentId         BigInt?    @map("payment_id")
  orderItemId       BigInt?    @map("order_item_id")
  userId            BigInt     @map("user_id")
  gateway           String
  gatewayDisputeId  String     @unique @map("gateway_dispute_id")
  type              String
  originalType      String?    @map("original_type")
  status            String
  reasonCode        String?    @map("reason_code")
  reasonDescription String?    @map("reason_description")
  amount            Decimal    @db.Decimal(10, 2)
  amountBrl         Decimal    @map("amount_brl") @db.Decimal(10, 2)
  feeAmount         Decimal    @default(0) @map("fee_amount") @db.Decimal(10, 2)
  feeAmountBrl      Decimal    @default(0) @map("fee_amount_brl") @db.Decimal(10, 2)
  openedAt          DateTime   @map("opened_at")
  escalatedAt       DateTime?  @map("escalated_at")
  responseDueDate   DateTime?  @map("response_due_date")
  resolvedAt        DateTime?  @map("resolved_at")
  outcome           String?
  netLossBrl        Decimal?   @map("net_loss_brl") @db.Decimal(10, 2)
  
  // Relations
  payment           Payment?   @relation(fields: [paymentId], references: [id])
  orderItem         OrderItem? @relation(fields: [orderItemId], references: [id])
  user              User       @relation(fields: [userId], references: [id])
  refunds           Refund[]

  @@map("disputes")
}

model Subscription {
  id              BigInt     @id @default(autoincrement())
  startDate       DateTime   @default(now()) @map("start_date")
  canceledAt      DateTime?  @map("canceled_at") // NOTE: sem timezone na estrutura real
  orderItemId     BigInt?    @map("order_item_id")
  userId          BigInt?    @map("user_id")
  status          String?
  billingInterval String?    @map("billing_interval")
  updatedAt       DateTime   @default(now()) @map("updated_at")
  
  // Relations
  orderItem       OrderItem? @relation(fields: [orderItemId], references: [id])
  user            User?      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

// ===== MODELOS DO WORKSPACE (mantidos da estrutura original) =====

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  bio       String?
  website   String?
  company   String?
  jobTitle  String?  @map("job_title")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  token        String   @unique
  expiresAt    DateTime @map("expires_at")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  lastActiveAt DateTime @default(now()) @map("last_active_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  logo        String?
  settings    Json              @default("{}")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")
  invitations Invitation[]
  activeUsers User[]            @relation("UserActiveWorkspace")
  members     WorkspaceMember[]

  @@index([slug])
  @@map("workspaces")
}

model WorkspaceMember {
  userId      String        @map("user_id")
  workspaceId String        @map("workspace_id")
  role        WorkspaceRole
  joinedAt    DateTime      @default(now()) @map("joined_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

model Invitation {
  id          String        @id @default(uuid())
  workspaceId String        @map("workspace_id")
  email       String
  role        WorkspaceRole
  invitedById String        @map("invited_by_id")
  token       String        @unique @default(uuid())
  expiresAt   DateTime      @map("expires_at")
  acceptedAt  DateTime?     @map("accepted_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  invitedBy   User          @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([workspaceId])
  @@map("invitations")
}

enum WorkspaceRole {
  owner
  admin
  member
}